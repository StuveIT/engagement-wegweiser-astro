---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import Card from "../../components/Card.astro";

// Define valid paths for this page, so they can be pre-rendered at build time
export const getStaticPaths = (async () => {
	const questionaire = await getCollection("questionaire");

	const validPaths = questionaire.map((question, index) => {
		return {
			params: {
				// valid pages are question-0, question-1, etc.
				path: "question-" + index,
			},
			props: {
				id: question.id,
				answers: question.data,
				index: index
			}
		};
	});

	// add the empty path to the valid paths (use the first question as the default)
	validPaths.push({
		params: { path: "" },
		props: {
			id: questionaire[0].id,
			answers: questionaire[0].data,
			index: 0
		}
	});

	return validPaths;
}) satisfies GetStaticPaths;

const { id, answers, index } = Astro.props;

// reformat the answers to be an array of objects
const options = Object.entries(answers).map(([key, value]) => {
	return {
		key,
		value
	};
});
---

<Layout>
	<Card>
		<h3>{id}</h3>
		<div id="options">
			{options.map((answer: { key: string, value: number[] }) => (
				<a class="link-block option" href={"/app/question-" + (index + 1)}>
					{answer.key}
				</a>
			))}
		</div>
	</Card>
</Layout>

<style>
	h3 {
		margin-top: 0;
	}

	#options {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-evenly;
		gap: 2rem;

		padding: 0 2em;
	}

	#options > * {
		flex: 1;

		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;

		background-color: var(--primary);
		border: none;
		border-radius: var(--border-radius);

		text-align: center;

		margin: 1rem 0;

		font-size: 1.2rem;
		text-transform: capitalize;

		padding: 1rem;
		margin: 0;
	}

	#options > *:hover {
		background-color: var(--accent);
		cursor: pointer;
	}
</style>